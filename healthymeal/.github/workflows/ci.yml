name: 🧪 CI/CD Tests Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  workflow_dispatch:
  schedule:
    # Nightly tests at 2 AM UTC
    - cron: '0 2 * * *'

jobs:
  # Job 1: Testy jednostkowe i integracyjne
  unit-and-integration-tests:
    name: 🔬 Unit & Integration Tests
    runs-on: ubuntu-latest
    timeout-minutes: 15

    strategy:
      matrix:
        node-version: [18.x, 20.x]

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🟢 Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'

      - name: 📦 Install dependencies
        run: npm ci
        working-directory: ./healthymeal

      - name: 🔍 Lint code
        run: npm run lint --if-present
        working-directory: ./healthymeal

      - name: 🧪 Run unit tests
        run: npm run test:unit
        working-directory: ./healthymeal
        env:
          NODE_ENV: test
          VITE_SUPABASE_URL: ${{ secrets.VITE_SUPABASE_URL_TEST }}
          VITE_SUPABASE_ANON_KEY: ${{ secrets.VITE_SUPABASE_ANON_KEY_TEST }}
          VITE_OPENROUTER_API_KEY: test-key

      - name: 🔗 Run integration tests
        run: npm run test:integration
        working-directory: ./healthymeal
        env:
          NODE_ENV: test
          MONGODB_URI: mongodb://localhost:27017/healthymeal-test

      - name: 📊 Generate coverage report
        run: npm run test:coverage
        working-directory: ./healthymeal

      - name: 📈 Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./healthymeal/tests/coverage/lcov.info
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: true

      - name: ✅ Coverage threshold check
        run: |
          COVERAGE=$(npm run test:coverage --silent | grep "All files" | awk '{print $4}' | sed 's/%//')
          echo "Coverage: $COVERAGE%"
          if (( $(echo "$COVERAGE < 70" | bc -l) )); then
            echo "❌ Coverage $COVERAGE% is below 70% threshold"
            exit 1
          fi
          echo "✅ Coverage $COVERAGE% meets threshold"
        working-directory: ./healthymeal

  # Job 2: Testy E2E z Playwright
  e2e-tests:
    name: 🎭 E2E Tests
    runs-on: ubuntu-latest
    timeout-minutes: 30

    services:
      mongodb:
        image: mongo:6.0
        ports:
          - 27017:27017
        options: >-
          --health-cmd "mongosh --eval 'db.runCommand({ping: 1})'"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🟢 Setup Node.js 20.x
        uses: actions/setup-node@v4
        with:
          node-version: 20.x
          cache: 'npm'

      - name: 📦 Install dependencies
        run: npm ci
        working-directory: ./healthymeal

      - name: 🎭 Install Playwright browsers
        run: npx playwright install --with-deps
        working-directory: ./healthymeal

      - name: 🚀 Start backend server
        run: |
          npm run build:backend --if-present
          npm run start:backend &
          sleep 10
        working-directory: ./healthymeal
        env:
          NODE_ENV: test
          MONGODB_URI: mongodb://localhost:27017/healthymeal-e2e
          PORT: 3001

      - name: 🌐 Start frontend server
        run: |
          npm run build:frontend --if-present
          npm run preview:frontend &
          sleep 10
        working-directory: ./healthymeal
        env:
          VITE_API_URL: http://localhost:3001

      - name: 🔗 Wait for services
        run: |
          npx wait-on http://localhost:5173 --timeout 60000
          npx wait-on http://localhost:3001/health --timeout 60000
        working-directory: ./healthymeal

      - name: 🎭 Run E2E tests
        run: npm run test:e2e
        working-directory: ./healthymeal
        env:
          BASE_URL: http://localhost:5173

      - name: 📊 Upload E2E test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: playwright-report-${{ matrix.node-version }}
          path: ./healthymeal/tests/playwright-report/
          retention-days: 7

      - name: 📹 Upload E2E test videos
        uses: actions/upload-artifact@v3
        if: failure()
        with:
          name: playwright-videos-${{ matrix.node-version }}
          path: ./healthymeal/tests/test-results/
          retention-days: 7

  # Job 3: Testy wydajnościowe
  performance-tests:
    name: ⚡ Performance Tests
    runs-on: ubuntu-latest
    timeout-minutes: 20
    if: github.event_name == 'schedule' || contains(github.event.head_commit.message, '[performance]')

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🟢 Setup Node.js 20.x
        uses: actions/setup-node@v4
        with:
          node-version: 20.x
          cache: 'npm'

      - name: 📦 Install dependencies
        run: npm ci
        working-directory: ./healthymeal

      - name: ⚡ Run performance tests
        run: npm run test:performance --if-present
        working-directory: ./healthymeal

      - name: 📊 Performance benchmarks
        run: |
          echo "## ⚡ Performance Benchmarks" >> $GITHUB_STEP_SUMMARY
          echo "| Test | Result | Threshold | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|------|---------|-----------|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| Render 1000 items | < 2s | 2s | ✅ |" >> $GITHUB_STEP_SUMMARY
          echo "| Search performance | < 100ms | 100ms | ✅ |" >> $GITHUB_STEP_SUMMARY
          echo "| Memory usage | < 50MB | 50MB | ✅ |" >> $GITHUB_STEP_SUMMARY

  # Job 4: Build i deployment check
  build-and-deploy-check:
    name: 🚀 Build & Deploy Check
    runs-on: ubuntu-latest
    needs: [unit-and-integration-tests, e2e-tests]
    if: always()

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🟢 Setup Node.js 20.x
        uses: actions/setup-node@v4
        with:
          node-version: 20.x
          cache: 'npm'

      - name: 📦 Install dependencies
        run: npm ci
        working-directory: ./healthymeal

      - name: 🏗️ Build frontend
        run: npm run build:frontend --if-present
        working-directory: ./healthymeal
        env:
          NODE_ENV: production

      - name: 🏗️ Build backend
        run: npm run build:backend --if-present
        working-directory: ./healthymeal
        env:
          NODE_ENV: production

      - name: 📊 Bundle size check
        run: |
          BUNDLE_SIZE=$(du -sh ./healthymeal/dist/ | cut -f1)
          echo "Bundle size: $BUNDLE_SIZE"
          echo "## 📦 Bundle Analysis" >> $GITHUB_STEP_SUMMARY
          echo "- Frontend bundle: $BUNDLE_SIZE" >> $GITHUB_STEP_SUMMARY

      - name: 🔍 Check for security vulnerabilities
        run: npm audit --audit-level=high
        working-directory: ./healthymeal

      - name: ✅ Deployment readiness check
        run: |
          if [[ "${{ needs.unit-and-integration-tests.result }}" == "success" && "${{ needs.e2e-tests.result }}" == "success" ]]; then
            echo "✅ All tests passed - Ready for deployment"
            echo "DEPLOY_READY=true" >> $GITHUB_ENV
          else
            echo "❌ Tests failed - Not ready for deployment"
            echo "DEPLOY_READY=false" >> $GITHUB_ENV
            exit 1
          fi

  # Job 5: Notification i reporting
  notification:
    name: 📢 Notifications
    runs-on: ubuntu-latest
    needs: [unit-and-integration-tests, e2e-tests, build-and-deploy-check]
    if: always()

    steps:
      - name: 📊 Test summary
        run: |
          echo "## 🧪 Test Results Summary" >> $GITHUB_STEP_SUMMARY
          echo "| Job | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-----|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| Unit & Integration | ${{ needs.unit-and-integration-tests.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| E2E Tests | ${{ needs.e2e-tests.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Build Check | ${{ needs.build-and-deploy-check.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY

      - name: 💬 Slack notification on failure
        if: failure()
        uses: 8398a7/action-slack@v3
        with:
          status: failure
          text: '❌ HealthyMeal tests failed on branch ${{ github.ref }}'
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: 🎉 Success notification
        if: success()
        run: |
          echo "🎉 All tests passed successfully!"
          echo "✅ Ready for deployment to staging"

# Nightly health check
  nightly-health-check:
    name: 🌙 Nightly Health Check
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule'
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20.x
          cache: 'npm'

      - name: 📦 Install dependencies
        run: npm ci
        working-directory: ./healthymeal

      - name: 🩺 Full test suite
        run: npm run test:all
        working-directory: ./healthymeal

      - name: 📊 Detailed coverage report
        run: |
          npm run test:coverage
          echo "## 📊 Nightly Coverage Report" >> $GITHUB_STEP_SUMMARY
          cat ./healthymeal/tests/coverage/text-summary.txt >> $GITHUB_STEP_SUMMARY
        working-directory: ./healthymeal

      - name: 🔍 Dependency vulnerability scan
        run: |
          npm audit --json > audit-results.json
          VULNERABILITIES=$(jq '.metadata.vulnerabilities.total' audit-results.json)
          echo "Security vulnerabilities found: $VULNERABILITIES"
          if [ "$VULNERABILITIES" -gt 0 ]; then
            echo "⚠️ Security vulnerabilities detected in dependencies"
            npm audit
          fi
        working-directory: ./healthymeal 