import { test, expect } from '@playwright/test';

// Dane testowe
const testUser = {
  email: 'test-search@example.com',
  password: 'TestPassword123!',
  name: 'Test User Search'
};

const testRecipes = [
  {
    title: 'Keto Kotlet Schabowy',
    ingredients: ['schab', 'jajko', 'mƒÖka migda≈Çowa'],
    hashtags: ['keto', 'obiad', 'miƒôso'],
    preparationTime: 30
  },
  {
    title: 'Vegan Sa≈Çatka Grecka',
    ingredients: ['og√≥rek', 'pomidor', 'oliwki', 'ser vegan'],
    hashtags: ['vegan', 'sa≈Çatka', 'zdrowe'],
    preparationTime: 15
  },
  {
    title: 'Low-Carb Zupa Pomidorowa',
    ingredients: ['pomidory', 'bulion', '≈õmietana'],
    hashtags: ['low-carb', 'zupa', 'obiad'],
    preparationTime: 45
  },
  {
    title: 'Paleo Kurczak z Warzywami',
    ingredients: ['kurczak', 'broku≈Çy', 'marchew'],
    hashtags: ['paleo', 'kurczak', 'warzywa'],
    preparationTime: 25
  }
];

test.describe('üîç E2E Search and Filtering', () => {
  test.beforeEach(async ({ page }) => {
    // Przejd≈∫ na stronƒô logowania
    await page.goto('/auth/login');
    
    // Zaloguj siƒô jako testowy u≈ºytkownik
    await page.fill('[data-testid="email-input"]', testUser.email);
    await page.fill('[data-testid="password-input"]', testUser.password);
    await page.click('[data-testid="login-button"]');
    
    // Sprawd≈∫ czy logowanie siƒô powiod≈Ço
    await expect(page).toHaveURL('/dashboard');
    
    // Przejd≈∫ do listy przepis√≥w
    await page.click('[data-testid="recipes-link"]');
    await expect(page).toHaveURL('/recipes');
  });

  test('powinien wy≈õwietliƒá pole wyszukiwania i filtry', async ({ page }) => {
    // Sprawd≈∫ czy g≈Ç√≥wne elementy sƒÖ widoczne
    await expect(page.locator('[data-testid="search-input"]')).toBeVisible();
    await expect(page.locator('[data-testid="filters-panel"]')).toBeVisible();
    await expect(page.locator('[data-testid="hashtags-filter"]')).toBeVisible();
    await expect(page.locator('[data-testid="preparation-time-filter"]')).toBeVisible();
    await expect(page.locator('[data-testid="difficulty-filter"]')).toBeVisible();
  });

  test('powinien wyszukiwaƒá przepisy po tytule', async ({ page }) => {
    // Wyszukaj przepisy z "keto"
    await page.fill('[data-testid="search-input"]', 'keto');
    await page.keyboard.press('Enter');
    
    // Sprawd≈∫ wyniki
    await expect(page.locator('[data-testid="recipe-card"]')).toHaveCount(1);
    await expect(page.locator('[data-testid="recipe-title"]')).toContainText('Keto');
    
    // Wyszukaj przepisy z "sa≈Çatka"
    await page.fill('[data-testid="search-input"]', 'sa≈Çatka');
    await page.keyboard.press('Enter');
    
    await expect(page.locator('[data-testid="recipe-card"]')).toHaveCount(1);
    await expect(page.locator('[data-testid="recipe-title"]')).toContainText('Sa≈Çatka');
  });

  test('powinien wyszukiwaƒá przepisy po sk≈Çadnikach', async ({ page }) => {
    // Wyszukaj przepisy ze sk≈Çadnikiem "kurczak"
    await page.fill('[data-testid="search-input"]', 'kurczak');
    await page.keyboard.press('Enter');
    
    // Sprawd≈∫ wyniki
    await expect(page.locator('[data-testid="recipe-card"]')).toHaveCount(1);
    await expect(page.locator('[data-testid="recipe-title"]')).toContainText('Kurczak');
    
    // Wyszukaj przepisy ze sk≈Çadnikiem "pomidor"
    await page.fill('[data-testid="search-input"]', 'pomidor');
    await page.keyboard.press('Enter');
    
    await expect(page.locator('[data-testid="recipe-card"]')).toHaveCount(2);
  });

  test('powinien filtrowaƒá przepisy po hashtagu', async ({ page }) => {
    // Kliknij filtr keto
    await page.click('[data-testid="hashtag-filter-keto"]');
    
    // Sprawd≈∫ wyniki
    await expect(page.locator('[data-testid="recipe-card"]')).toHaveCount(1);
    await expect(page.locator('[data-testid="recipe-hashtag"]')).toContainText('#keto');
    
    // Dodaj filtr vegan
    await page.click('[data-testid="hashtag-filter-vegan"]');
    
    // Sprawd≈∫ ≈ºe sƒÖ 2 przepisy (keto + vegan)
    await expect(page.locator('[data-testid="recipe-card"]')).toHaveCount(2);
  });

  test('powinien filtrowaƒá przepisy po czasie przygotowania', async ({ page }) => {
    // Ustaw maksymalny czas na 20 minut
    await page.fill('[data-testid="max-time-input"]', '20');
    await page.click('[data-testid="apply-time-filter"]');
    
    // Sprawd≈∫ ≈ºe pokazuje tylko przepisy ‚â§ 20 min
    const recipes = page.locator('[data-testid="recipe-card"]');
    const count = await recipes.count();
    
    for (let i = 0; i < count; i++) {
      const timeText = await recipes.nth(i).locator('[data-testid="preparation-time"]').textContent();
      const time = parseInt(timeText.replace(' min', ''));
      expect(time).toBeLessThanOrEqual(20);
    }
  });

  test('powinien kombinowaƒá wyszukiwanie z filtrami', async ({ page }) => {
    // Wyszukaj "obiad"
    await page.fill('[data-testid="search-input"]', 'obiad');
    await page.keyboard.press('Enter');
    
    // Dodaj filtr keto
    await page.click('[data-testid="hashtag-filter-keto"]');
    
    // Sprawd≈∫ ≈ºe pokazuje tylko "Keto Kotlet" (obiad + keto)
    await expect(page.locator('[data-testid="recipe-card"]')).toHaveCount(1);
    await expect(page.locator('[data-testid="recipe-title"]')).toContainText('Keto Kotlet');
  });

  test('powinien wyczy≈õciƒá filtry', async ({ page }) => {
    // Zastosuj kilka filtr√≥w
    await page.fill('[data-testid="search-input"]', 'keto');
    await page.keyboard.press('Enter');
    await page.click('[data-testid="hashtag-filter-keto"]');
    await page.fill('[data-testid="max-time-input"]', '30');
    
    // Sprawd≈∫ ≈ºe filtry sƒÖ aktywne
    await expect(page.locator('[data-testid="active-filters"]')).toBeVisible();
    
    // Wyczy≈õƒá wszystkie filtry
    await page.click('[data-testid="clear-all-filters"]');
    
    // Sprawd≈∫ ≈ºe wszystkie przepisy sƒÖ widoczne
    await expect(page.locator('[data-testid="recipe-card"]')).toHaveCount(4);
    await expect(page.locator('[data-testid="search-input"]')).toHaveValue('');
  });

  test('powinien sortowaƒá wyniki wyszukiwania', async ({ page }) => {
    // Wyszukaj wszystkie przepisy
    await page.fill('[data-testid="search-input"]', '');
    
    // Sortuj po czasie przygotowania (rosnƒÖco)
    await page.selectOption('[data-testid="sort-select"]', 'preparation-time-asc');
    
    // Sprawd≈∫ kolejno≈õƒá
    const firstRecipe = page.locator('[data-testid="recipe-card"]').first();
    await expect(firstRecipe.locator('[data-testid="recipe-title"]')).toContainText('Vegan Sa≈Çatka'); // 15 min
    
    // Sortuj po czasie przygotowania (malejƒÖco)
    await page.selectOption('[data-testid="sort-select"]', 'preparation-time-desc');
    
    const firstRecipeDesc = page.locator('[data-testid="recipe-card"]').first();
    await expect(firstRecipeDesc.locator('[data-testid="recipe-title"]')).toContainText('Low-Carb Zupa'); // 45 min
  });

  test('powinien wy≈õwietliƒá komunikat "brak wynik√≥w"', async ({ page }) => {
    // Wyszukaj nieistniejƒÖcy przepis
    await page.fill('[data-testid="search-input"]', 'nieistniejƒÖcy przepis xyz');
    await page.keyboard.press('Enter');
    
    // Sprawd≈∫ komunikat
    await expect(page.locator('[data-testid="no-results"]')).toBeVisible();
    await expect(page.locator('[data-testid="no-results"]')).toContainText('Nie znaleziono przepis√≥w');
    await expect(page.locator('[data-testid="recipe-card"]')).toHaveCount(0);
  });

  test('powinien obs≈Çugiwaƒá paginacjƒô wynik√≥w', async ({ page }) => {
    // Je≈õli jest wiƒôcej ni≈º 10 przepis√≥w, sprawd≈∫ paginacjƒô
    const recipeCount = await page.locator('[data-testid="recipe-card"]').count();
    
    if (recipeCount > 10) {
      // Sprawd≈∫ czy paginacja jest widoczna
      await expect(page.locator('[data-testid="pagination"]')).toBeVisible();
      
      // Przejd≈∫ na drugƒÖ stronƒô
      await page.click('[data-testid="page-2"]');
      
      // Sprawd≈∫ czy URL siƒô zmieni≈Ç
      await expect(page).toHaveURL(/.*page=2/);
    }
  });

  test('powinien zachowaƒá filtry w URL', async ({ page }) => {
    // Zastosuj filtry
    await page.fill('[data-testid="search-input"]', 'keto');
    await page.keyboard.press('Enter');
    await page.click('[data-testid="hashtag-filter-keto"]');
    
    // Sprawd≈∫ URL
    await expect(page).toHaveURL(/.*search=keto/);
    await expect(page).toHaveURL(/.*hashtags=keto/);
    
    // Od≈õwie≈º stronƒô
    await page.reload();
    
    // Sprawd≈∫ czy filtry zosta≈Çy zachowane
    await expect(page.locator('[data-testid="search-input"]')).toHaveValue('keto');
    await expect(page.locator('[data-testid="hashtag-filter-keto"]')).toBeChecked();
  });

  test('powinien wy≈õwietliƒá liczbƒô znalezionych wynik√≥w', async ({ page }) => {
    // Wyszukaj "keto"
    await page.fill('[data-testid="search-input"]', 'keto');
    await page.keyboard.press('Enter');
    
    // Sprawd≈∫ licznik wynik√≥w
    await expect(page.locator('[data-testid="results-count"]')).toContainText('Znaleziono 1 przepis');
    
    // Wyszukaj "pomidor"
    await page.fill('[data-testid="search-input"]', 'pomidor');
    await page.keyboard.press('Enter');
    
    await expect(page.locator('[data-testid="results-count"]')).toContainText('Znaleziono 2 przepisy');
  });
}); 