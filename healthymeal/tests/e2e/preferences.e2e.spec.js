import { test, expect } from '@playwright/test';

// Dane testowe
const testUser = {
  email: 'test-preferences@example.com',
  password: 'TestPassword123!',
  name: 'Test User Preferences'
};

const testPreferences = {
  dietType: 'keto',
  maxCarbs: 25,
  excludedProducts: ['cukier', 'mƒÖka pszenna', 'ry≈º'],
  allergens: ['gluten', 'dairy', 'nuts']
};

test.describe('üß™ E2E Preferences Management', () => {
  test.beforeEach(async ({ page }) => {
    // Przejd≈∫ na stronƒô logowania
    await page.goto('/auth/login');
    
    // Zaloguj siƒô jako testowy u≈ºytkownik
    await page.fill('[data-testid="email-input"]', testUser.email);
    await page.fill('[data-testid="password-input"]', testUser.password);
    await page.click('[data-testid="login-button"]');
    
    // Sprawd≈∫ czy logowanie siƒô powiod≈Ço
    await expect(page).toHaveURL('/dashboard');
  });

  test('powinien wy≈õwietliƒá formularz preferencji', async ({ page }) => {
    // Przejd≈∫ do preferencji
    await page.click('[data-testid="preferences-link"]');
    
    // Sprawd≈∫ czy formularz siƒô wy≈õwietla
    await expect(page).toHaveURL('/profile/preferences');
    await expect(page.locator('[data-testid="preferences-form"]')).toBeVisible();
    
    // Sprawd≈∫ obecno≈õƒá g≈Ç√≥wnych sekcji
    await expect(page.locator('[data-testid="diet-type-section"]')).toBeVisible();
    await expect(page.locator('[data-testid="max-carbs-section"]')).toBeVisible();
    await expect(page.locator('[data-testid="excluded-products-section"]')).toBeVisible();
    await expect(page.locator('[data-testid="allergens-section"]')).toBeVisible();
  });

  test('powinien pozwoliƒá na wyb√≥r typu diety', async ({ page }) => {
    await page.goto('/profile/preferences');
    
    // Sprawd≈∫ domy≈õlnƒÖ warto≈õƒá
    const dietSelect = page.locator('[data-testid="diet-type-select"]');
    await expect(dietSelect).toHaveValue('normal');
    
    // Zmie≈Ñ typ diety
    await dietSelect.selectOption('keto');
    await expect(dietSelect).toHaveValue('keto');
    
    // Sprawd≈∫ czy opcje sƒÖ dostƒôpne
    const options = await dietSelect.locator('option').allTextContents();
    expect(options).toContain('Normalna');
    expect(options).toContain('Keto');
    expect(options).toContain('Low Carb');
    expect(options).toContain('Paleo');
  });

  test('powinien pozwoliƒá na ustawienie maksymalnej ilo≈õci wƒôglowodan√≥w', async ({ page }) => {
    await page.goto('/profile/preferences');
    
    // Sprawd≈∫ suwak wƒôglowodan√≥w
    const carbsSlider = page.locator('[data-testid="max-carbs-slider"]');
    await expect(carbsSlider).toBeVisible();
    
    // Ustaw warto≈õƒá suwaka
    await carbsSlider.fill('25');
    await expect(carbsSlider).toHaveValue('25');
    
    // Sprawd≈∫ czy warto≈õƒá jest wy≈õwietlana
    const carbsValue = page.locator('[data-testid="max-carbs-value"]');
    await expect(carbsValue).toContainText('25g');
  });

  test('powinien pozwoliƒá na dodanie wykluczonych produkt√≥w', async ({ page }) => {
    await page.goto('/profile/preferences');
    
    // Znajd≈∫ pole wykluczonych produkt√≥w
    const excludedInput = page.locator('[data-testid="excluded-products-input"]');
    await expect(excludedInput).toBeVisible();
    
    // Dodaj produkty
    await excludedInput.fill('cukier');
    await page.keyboard.press('Enter');
    
    await excludedInput.fill('mƒÖka pszenna');
    await page.keyboard.press('Enter');
    
    // Sprawd≈∫ czy produkty zosta≈Çy dodane
    await expect(page.locator('[data-testid="excluded-tag-cukier"]')).toBeVisible();
    await expect(page.locator('[data-testid="excluded-tag-mƒÖka pszenna"]')).toBeVisible();
  });

  test('powinien pozwoliƒá na usuniƒôcie wykluczonych produkt√≥w', async ({ page }) => {
    await page.goto('/profile/preferences');
    
    // Dodaj produkt
    const excludedInput = page.locator('[data-testid="excluded-products-input"]');
    await excludedInput.fill('cukier');
    await page.keyboard.press('Enter');
    
    // Sprawd≈∫ czy produkt zosta≈Ç dodany
    await expect(page.locator('[data-testid="excluded-tag-cukier"]')).toBeVisible();
    
    // Usu≈Ñ produkt
    await page.click('[data-testid="remove-excluded-cukier"]');
    
    // Sprawd≈∫ czy produkt zosta≈Ç usuniƒôty
    await expect(page.locator('[data-testid="excluded-tag-cukier"]')).not.toBeVisible();
  });

  test('powinien pozwoliƒá na wyb√≥r alergen√≥w', async ({ page }) => {
    await page.goto('/profile/preferences');
    
    // Sprawd≈∫ checkboxy alergen√≥w
    const glutenCheckbox = page.locator('[data-testid="allergen-gluten"]');
    const dairyCheckbox = page.locator('[data-testid="allergen-dairy"]');
    const nutsCheckbox = page.locator('[data-testid="allergen-nuts"]');
    
    await expect(glutenCheckbox).toBeVisible();
    await expect(dairyCheckbox).toBeVisible();
    await expect(nutsCheckbox).toBeVisible();
    
    // Zaznacz alergeny
    await glutenCheckbox.check();
    await dairyCheckbox.check();
    await nutsCheckbox.check();
    
    // Sprawd≈∫ czy sƒÖ zaznaczone
    await expect(glutenCheckbox).toBeChecked();
    await expect(dairyCheckbox).toBeChecked();
    await expect(nutsCheckbox).toBeChecked();
  });

  test('powinien zapisaƒá preferencje', async ({ page }) => {
    await page.goto('/profile/preferences');
    
    // Wype≈Çnij formularz
    await page.selectOption('[data-testid="diet-type-select"]', 'keto');
    await page.fill('[data-testid="max-carbs-slider"]', '25');
    
    // Dodaj wykluczony produkt
    const excludedInput = page.locator('[data-testid="excluded-products-input"]');
    await excludedInput.fill('cukier');
    await page.keyboard.press('Enter');
    
    // Zaznacz alergeny
    await page.check('[data-testid="allergen-gluten"]');
    await page.check('[data-testid="allergen-dairy"]');
    
    // Zapisz preferencje
    await page.click('[data-testid="save-preferences-button"]');
    
    // Sprawd≈∫ komunikat sukcesu
    await expect(page.locator('[data-testid="success-message"]')).toBeVisible();
    await expect(page.locator('[data-testid="success-message"]')).toContainText('Preferencje zosta≈Çy zapisane');
  });

  test('powinien wy≈õwietliƒá b≈ÇƒÖd walidacji dla nieprawid≈Çowych danych', async ({ page }) => {
    await page.goto('/profile/preferences');
    
    // Ustaw nieprawid≈ÇowƒÖ warto≈õƒá wƒôglowodan√≥w
    await page.fill('[data-testid="max-carbs-slider"]', '999');
    
    // Spr√≥buj zapisaƒá
    await page.click('[data-testid="save-preferences-button"]');
    
    // Sprawd≈∫ komunikat b≈Çƒôdu
    await expect(page.locator('[data-testid="error-message"]')).toBeVisible();
    await expect(page.locator('[data-testid="error-message"]')).toContainText('Maksymalna ilo≈õƒá wƒôglowodan√≥w nie mo≈ºe przekraczaƒá 300g');
  });

  test('powinien zachowaƒá preferencje po od≈õwie≈ºeniu strony', async ({ page }) => {
    await page.goto('/profile/preferences');
    
    // Ustaw preferencje
    await page.selectOption('[data-testid="diet-type-select"]', 'lowCarb');
    await page.fill('[data-testid="max-carbs-slider"]', '50');
    
    // Zapisz
    await page.click('[data-testid="save-preferences-button"]');
    await expect(page.locator('[data-testid="success-message"]')).toBeVisible();
    
    // Od≈õwie≈º stronƒô
    await page.reload();
    
    // Sprawd≈∫ czy preferencje zosta≈Çy zachowane
    await expect(page.locator('[data-testid="diet-type-select"]')).toHaveValue('lowCarb');
    await expect(page.locator('[data-testid="max-carbs-slider"]')).toHaveValue('50');
  });

  test('powinien resetowaƒá preferencje do domy≈õlnych', async ({ page }) => {
    await page.goto('/profile/preferences');
    
    // Ustaw preferencje
    await page.selectOption('[data-testid="diet-type-select"]', 'keto');
    await page.fill('[data-testid="max-carbs-slider"]', '20');
    
    // Kliknij reset
    await page.click('[data-testid="reset-preferences-button"]');
    
    // Sprawd≈∫ czy warto≈õci zosta≈Çy zresetowane
    await expect(page.locator('[data-testid="diet-type-select"]')).toHaveValue('normal');
    await expect(page.locator('[data-testid="max-carbs-slider"]')).toHaveValue('0');
  });

  test('powinien wy≈õwietliƒá podglƒÖd wp≈Çywu preferencji na przepisy', async ({ page }) => {
    await page.goto('/profile/preferences');
    
    // Ustaw preferencje
    await page.selectOption('[data-testid="diet-type-select"]', 'keto');
    await page.fill('[data-testid="max-carbs-slider"]', '25');
    
    // Dodaj wykluczony produkt
    const excludedInput = page.locator('[data-testid="excluded-products-input"]');
    await excludedInput.fill('cukier');
    await page.keyboard.press('Enter');
    
    // Sprawd≈∫ podglƒÖd wp≈Çywu
    await expect(page.locator('[data-testid="preferences-preview"]')).toBeVisible();
    await expect(page.locator('[data-testid="preferences-preview"]')).toContainText('Keto');
    await expect(page.locator('[data-testid="preferences-preview"]')).toContainText('25g wƒôglowodan√≥w');
    await expect(page.locator('[data-testid="preferences-preview"]')).toContainText('cukier');
  });
}); 